"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var fs = require("fs");
var path = require("path");
var csh_1 = require("../csh");
var utils_1 = require("./utils");
var testFilesPath = path.join(__dirname, '..', '..', 'test');
var readFilesPath = path.join(testFilesPath, 'csh-read');
var resultsFilesPath = path.join(__dirname, '..', '..', 'results');
describe('CSH', function () {
    fs.readdirSync(readFilesPath).forEach(function (f) {
        it("reads CSH file (" + f + ")", function () {
            var basePath = path.join(readFilesPath, f);
            var baseResults = path.join(resultsFilesPath, 'csh', f);
            var fileName = path.join(basePath, 'src.csh');
            var csh = csh_1.readCsh(fs.readFileSync(fileName));
            fs.mkdirSync(baseResults, { recursive: true });
            for (var _i = 0, _a = csh.shapes; _i < _a.length; _i++) {
                var shape = _a[_i];
                utils_1.drawBezierPaths(shape.paths, shape.width, shape.height, path.join(baseResults, "shape-" + shape.name + ".png"));
            }
            fs.writeFileSync(path.join(baseResults, "data.json"), JSON.stringify(csh, null, 2));
            // console.log(require('util').inspect(csh, false, 99, true));
            var expected = JSON.parse(fs.readFileSync(path.join(basePath, 'data.json'), 'utf8'));
            chai_1.expect(csh).eql(expected, f);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvY3NoLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBOEI7QUFDOUIsdUJBQXlCO0FBQ3pCLDJCQUE2QjtBQUM3Qiw4QkFBaUM7QUFDakMsaUNBQTBDO0FBRTFDLElBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDL0QsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDM0QsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBRXJFLFFBQVEsQ0FBQyxLQUFLLEVBQUU7SUFDZixFQUFFLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7UUFDdEMsRUFBRSxDQUFDLHFCQUFtQixDQUFDLE1BQUcsRUFBRTtZQUMzQixJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM3QyxJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMxRCxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUNoRCxJQUFNLEdBQUcsR0FBRyxhQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBRS9DLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFFL0MsS0FBb0IsVUFBVSxFQUFWLEtBQUEsR0FBRyxDQUFDLE1BQU0sRUFBVixjQUFVLEVBQVYsSUFBVSxFQUFFO2dCQUEzQixJQUFNLEtBQUssU0FBQTtnQkFDZix1QkFBZSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFdBQVMsS0FBSyxDQUFDLElBQUksU0FBTSxDQUFDLENBQUMsQ0FBQzthQUMzRztZQUVELEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFcEYsOERBQThEO1lBRTlELElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBRXZGLGFBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L2NzaC5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XHJcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcclxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0IHsgcmVhZENzaCB9IGZyb20gJy4uL2NzaCc7XHJcbmltcG9ydCB7IGRyYXdCZXppZXJQYXRocyB9IGZyb20gJy4vdXRpbHMnO1xyXG5cclxuY29uc3QgdGVzdEZpbGVzUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLicsICcuLicsICd0ZXN0Jyk7XHJcbmNvbnN0IHJlYWRGaWxlc1BhdGggPSBwYXRoLmpvaW4odGVzdEZpbGVzUGF0aCwgJ2NzaC1yZWFkJyk7XHJcbmNvbnN0IHJlc3VsdHNGaWxlc1BhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAncmVzdWx0cycpO1xyXG5cclxuZGVzY3JpYmUoJ0NTSCcsICgpID0+IHtcclxuXHRmcy5yZWFkZGlyU3luYyhyZWFkRmlsZXNQYXRoKS5mb3JFYWNoKGYgPT4ge1xyXG5cdFx0aXQoYHJlYWRzIENTSCBmaWxlICgke2Z9KWAsICgpID0+IHtcclxuXHRcdFx0Y29uc3QgYmFzZVBhdGggPSBwYXRoLmpvaW4ocmVhZEZpbGVzUGF0aCwgZik7XHJcblx0XHRcdGNvbnN0IGJhc2VSZXN1bHRzID0gcGF0aC5qb2luKHJlc3VsdHNGaWxlc1BhdGgsICdjc2gnLCBmKTtcclxuXHRcdFx0Y29uc3QgZmlsZU5hbWUgPSBwYXRoLmpvaW4oYmFzZVBhdGgsICdzcmMuY3NoJyk7XHJcblx0XHRcdGNvbnN0IGNzaCA9IHJlYWRDc2goZnMucmVhZEZpbGVTeW5jKGZpbGVOYW1lKSk7XHJcblxyXG5cdFx0XHRmcy5ta2RpclN5bmMoYmFzZVJlc3VsdHMsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xyXG5cclxuXHRcdFx0Zm9yIChjb25zdCBzaGFwZSBvZiBjc2guc2hhcGVzKSB7XHJcblx0XHRcdFx0ZHJhd0JlemllclBhdGhzKHNoYXBlLnBhdGhzLCBzaGFwZS53aWR0aCwgc2hhcGUuaGVpZ2h0LCBwYXRoLmpvaW4oYmFzZVJlc3VsdHMsIGBzaGFwZS0ke3NoYXBlLm5hbWV9LnBuZ2ApKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4oYmFzZVJlc3VsdHMsIGBkYXRhLmpzb25gKSwgSlNPTi5zdHJpbmdpZnkoY3NoLCBudWxsLCAyKSk7XHJcblxyXG5cdFx0XHQvLyBjb25zb2xlLmxvZyhyZXF1aXJlKCd1dGlsJykuaW5zcGVjdChjc2gsIGZhbHNlLCA5OSwgdHJ1ZSkpO1xyXG5cclxuXHRcdFx0Y29uc3QgZXhwZWN0ZWQgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oYmFzZVBhdGgsICdkYXRhLmpzb24nKSwgJ3V0ZjgnKSk7XHJcblxyXG5cdFx0XHRleHBlY3QoY3NoKS5lcWwoZXhwZWN0ZWQsIGYpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn0pO1xyXG4iXSwic291cmNlUm9vdCI6IkY6XFxwcm9qZWN0c1xcYWctcHNkXFxzcmMifQ==
