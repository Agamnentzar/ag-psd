"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("./common");
var fs = require("fs");
var path = require("path");
var chai_1 = require("chai");
var engineData_1 = require("../engineData");
var common_1 = require("./common");
var testsPath = path.join(__dirname, '..', '..', 'test');
describe('engineData', function () {
    var dataBin = fs.readFileSync(path.join(testsPath, 'engineData.bin'));
    var dataJSON = JSON.parse(fs.readFileSync(path.join(testsPath, 'engineData.json'), 'utf8'));
    var dataBin2 = fs.readFileSync(path.join(testsPath, 'engineData2b.bin'));
    var dataJSON2 = JSON.parse(fs.readFileSync(path.join(testsPath, 'engineData2.json'), 'utf8'));
    it('parses engine data', function () {
        var result = engineData_1.parseEngineData(dataBin);
        chai_1.expect(result).eql(dataJSON);
    });
    it('parses engine data (2)', function () {
        var result = engineData_1.parseEngineData(dataBin2);
        fs.writeFileSync(path.join(__dirname, '..', '..', 'results', 'engineData2.json'), JSON.stringify(result, null, 2), 'utf8');
        chai_1.expect(result).eql(dataJSON2);
    });
    it('serializes engine data', function () {
        var result = engineData_1.serializeEngineData(dataJSON);
        common_1.expectBuffersEqual(result, dataBin, 'serialized.bin');
    });
    // TODO: floats encoded as integers in some fields (no way to use keys because they are all numeric)
    it('serializes engine data (2)', function () {
        var result = engineData_1.serializeEngineData(dataJSON2, true);
        common_1.expectBuffersEqual(result, dataBin2, 'serialized2.bin');
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZW5naW5lRGF0YS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0JBQWtCO0FBQ2xCLHVCQUF5QjtBQUN6QiwyQkFBNkI7QUFDN0IsNkJBQThCO0FBQzlCLDRDQUFxRTtBQUNyRSxtQ0FBOEM7QUFFOUMsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUUzRCxRQUFRLENBQUMsWUFBWSxFQUFFO0lBQ3RCLElBQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDOUYsSUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7SUFDM0UsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGtCQUFrQixDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUVoRyxFQUFFLENBQUMsb0JBQW9CLEVBQUU7UUFDeEIsSUFBTSxNQUFNLEdBQUcsNEJBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV4QyxhQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzlCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdCQUF3QixFQUFFO1FBQzVCLElBQU0sTUFBTSxHQUFHLDRCQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDekMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUUzSCxhQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdCQUF3QixFQUFFO1FBQzVCLElBQU0sTUFBTSxHQUFHLGdDQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTdDLDJCQUFrQixDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUN2RCxDQUFDLENBQUMsQ0FBQztJQUVILG9HQUFvRztJQUNwRyxFQUFFLENBQUMsNEJBQTRCLEVBQUU7UUFDaEMsSUFBTSxNQUFNLEdBQUcsZ0NBQW1CLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXBELDJCQUFrQixDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvZW5naW5lRGF0YS5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuL2NvbW1vbic7XHJcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcclxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XHJcbmltcG9ydCB7IHBhcnNlRW5naW5lRGF0YSwgc2VyaWFsaXplRW5naW5lRGF0YSB9IGZyb20gJy4uL2VuZ2luZURhdGEnO1xyXG5pbXBvcnQgeyBleHBlY3RCdWZmZXJzRXF1YWwgfSBmcm9tICcuL2NvbW1vbic7XHJcblxyXG5jb25zdCB0ZXN0c1BhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAndGVzdCcpO1xyXG5cclxuZGVzY3JpYmUoJ2VuZ2luZURhdGEnLCAoKSA9PiB7XHJcblx0Y29uc3QgZGF0YUJpbiA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4odGVzdHNQYXRoLCAnZW5naW5lRGF0YS5iaW4nKSk7XHJcblx0Y29uc3QgZGF0YUpTT04gPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4odGVzdHNQYXRoLCAnZW5naW5lRGF0YS5qc29uJyksICd1dGY4JykpO1xyXG5cdGNvbnN0IGRhdGFCaW4yID0gZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbih0ZXN0c1BhdGgsICdlbmdpbmVEYXRhMmIuYmluJykpO1xyXG5cdGNvbnN0IGRhdGFKU09OMiA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbih0ZXN0c1BhdGgsICdlbmdpbmVEYXRhMi5qc29uJyksICd1dGY4JykpO1xyXG5cclxuXHRpdCgncGFyc2VzIGVuZ2luZSBkYXRhJywgKCkgPT4ge1xyXG5cdFx0Y29uc3QgcmVzdWx0ID0gcGFyc2VFbmdpbmVEYXRhKGRhdGFCaW4pO1xyXG5cclxuXHRcdGV4cGVjdChyZXN1bHQpLmVxbChkYXRhSlNPTik7XHJcblx0fSk7XHJcblxyXG5cdGl0KCdwYXJzZXMgZW5naW5lIGRhdGEgKDIpJywgKCkgPT4ge1xyXG5cdFx0Y29uc3QgcmVzdWx0ID0gcGFyc2VFbmdpbmVEYXRhKGRhdGFCaW4yKTtcclxuXHRcdGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJ3Jlc3VsdHMnLCAnZW5naW5lRGF0YTIuanNvbicpLCBKU09OLnN0cmluZ2lmeShyZXN1bHQsIG51bGwsIDIpLCAndXRmOCcpO1xyXG5cclxuXHRcdGV4cGVjdChyZXN1bHQpLmVxbChkYXRhSlNPTjIpO1xyXG5cdH0pO1xyXG5cclxuXHRpdCgnc2VyaWFsaXplcyBlbmdpbmUgZGF0YScsICgpID0+IHtcclxuXHRcdGNvbnN0IHJlc3VsdCA9IHNlcmlhbGl6ZUVuZ2luZURhdGEoZGF0YUpTT04pO1xyXG5cclxuXHRcdGV4cGVjdEJ1ZmZlcnNFcXVhbChyZXN1bHQsIGRhdGFCaW4sICdzZXJpYWxpemVkLmJpbicpO1xyXG5cdH0pO1xyXG5cclxuXHQvLyBUT0RPOiBmbG9hdHMgZW5jb2RlZCBhcyBpbnRlZ2VycyBpbiBzb21lIGZpZWxkcyAobm8gd2F5IHRvIHVzZSBrZXlzIGJlY2F1c2UgdGhleSBhcmUgYWxsIG51bWVyaWMpXHJcblx0aXQoJ3NlcmlhbGl6ZXMgZW5naW5lIGRhdGEgKDIpJywgKCkgPT4ge1xyXG5cdFx0Y29uc3QgcmVzdWx0ID0gc2VyaWFsaXplRW5naW5lRGF0YShkYXRhSlNPTjIsIHRydWUpO1xyXG5cclxuXHRcdGV4cGVjdEJ1ZmZlcnNFcXVhbChyZXN1bHQsIGRhdGFCaW4yLCAnc2VyaWFsaXplZDIuYmluJyk7XHJcblx0fSk7XHJcbn0pO1xyXG4iXSwic291cmNlUm9vdCI6IkY6XFxwcm9qZWN0c1xcYWctcHNkXFxzcmMifQ==
