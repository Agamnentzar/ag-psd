"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.drawBezierPaths = void 0;
function drawBezierPaths(paths, width, height, fileName, ox, oy) {
    if (ox === void 0) { ox = 0; }
    if (oy === void 0) { oy = 0; }
    var canvas = require('canvas').createCanvas(width, height);
    var context = canvas.getContext('2d');
    context.fillStyle = 'red';
    context.translate(-ox, -oy);
    for (var _i = 0, paths_1 = paths; _i < paths_1.length; _i++) {
        var path = paths_1[_i];
        context.beginPath();
        context.moveTo(path.knots[0].points[2], path.knots[0].points[3]);
        for (var i = 1; i < path.knots.length; i++) {
            // console.log(path.knots[i].points.map(x => x.toFixed(2)));
            context.bezierCurveTo(path.knots[i - 1].points[4], path.knots[i - 1].points[5], path.knots[i].points[0], path.knots[i].points[1], path.knots[i].points[2], path.knots[i].points[3]);
        }
        if (!path.open)
            context.closePath();
        context.fill();
    }
    require('fs').writeFileSync(fileName, canvas.toBuffer());
}
exports.drawBezierPaths = drawBezierPaths;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsU0FBZ0IsZUFBZSxDQUFDLEtBQW1CLEVBQUUsS0FBYSxFQUFFLE1BQWMsRUFBRSxRQUFnQixFQUFFLEVBQU0sRUFBRSxFQUFNO0lBQWQsbUJBQUEsRUFBQSxNQUFNO0lBQUUsbUJBQUEsRUFBQSxNQUFNO0lBQ25ILElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzdELElBQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFFLENBQUM7SUFDekMsT0FBTyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFDMUIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVCLEtBQW1CLFVBQUssRUFBTCxlQUFLLEVBQUwsbUJBQUssRUFBTCxJQUFLLEVBQUU7UUFBckIsSUFBTSxJQUFJLGNBQUE7UUFDZCxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDcEIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMzQyw0REFBNEQ7WUFDNUQsT0FBTyxDQUFDLGFBQWEsQ0FDcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFDeEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNyRztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTtZQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNwQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDZjtJQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFsQkQsMENBa0JDIiwiZmlsZSI6InRlc3QvdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZXppZXJQYXRoIH0gZnJvbSAnLi4vcHNkJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3QmV6aWVyUGF0aHMocGF0aHM6IEJlemllclBhdGhbXSwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGZpbGVOYW1lOiBzdHJpbmcsIG94ID0gMCwgb3kgPSAwKSB7XHJcblx0Y29uc3QgY2FudmFzID0gcmVxdWlyZSgnY2FudmFzJykuY3JlYXRlQ2FudmFzKHdpZHRoLCBoZWlnaHQpO1xyXG5cdGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSE7XHJcblx0Y29udGV4dC5maWxsU3R5bGUgPSAncmVkJztcclxuXHRjb250ZXh0LnRyYW5zbGF0ZSgtb3gsIC1veSk7XHJcblx0Zm9yIChjb25zdCBwYXRoIG9mIHBhdGhzKSB7XHJcblx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y29udGV4dC5tb3ZlVG8ocGF0aC5rbm90c1swXS5wb2ludHNbMl0sIHBhdGgua25vdHNbMF0ucG9pbnRzWzNdKTtcclxuXHRcdGZvciAobGV0IGkgPSAxOyBpIDwgcGF0aC5rbm90cy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHQvLyBjb25zb2xlLmxvZyhwYXRoLmtub3RzW2ldLnBvaW50cy5tYXAoeCA9PiB4LnRvRml4ZWQoMikpKTtcclxuXHRcdFx0Y29udGV4dC5iZXppZXJDdXJ2ZVRvKFxyXG5cdFx0XHRcdHBhdGgua25vdHNbaSAtIDFdLnBvaW50c1s0XSwgcGF0aC5rbm90c1tpIC0gMV0ucG9pbnRzWzVdLFxyXG5cdFx0XHRcdHBhdGgua25vdHNbaV0ucG9pbnRzWzBdLCBwYXRoLmtub3RzW2ldLnBvaW50c1sxXSwgcGF0aC5rbm90c1tpXS5wb2ludHNbMl0sIHBhdGgua25vdHNbaV0ucG9pbnRzWzNdKTtcclxuXHRcdH1cclxuXHRcdGlmICghcGF0aC5vcGVuKSBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cdFx0Y29udGV4dC5maWxsKCk7XHJcblx0fVxyXG5cdHJlcXVpcmUoJ2ZzJykud3JpdGVGaWxlU3luYyhmaWxlTmFtZSwgY2FudmFzLnRvQnVmZmVyKCkpO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiRjpcXHByb2plY3RzXFxhZy1wc2RcXHNyYyJ9
