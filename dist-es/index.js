import { writePsd as writePsdInternal, getWriterBuffer, createWriter, getWriterBufferNoCopy } from './psdWriter';
import { readPsd as readPsdInternal, createReader } from './psdReader';
export * from './abr';
export * from './csh';
export { initializeCanvas } from './helpers';
export * from './psd';
import { fromByteArray } from 'base64-js';
import { BoundingBoxScan } from './BoundingBoxScanner';
export var byteArrayToBase64 = fromByteArray;
export var boundingBoxScanner = new BoundingBoxScan();
export function readPsd(buffer, options) {
    var reader = 'buffer' in buffer ?
        createReader(buffer.buffer, buffer.byteOffset, buffer.byteLength) :
        createReader(buffer);
    return readPsdInternal(reader, options);
}
export function writePsd(psd, options) {
    var writer = createWriter();
    writePsdInternal(writer, psd, options);
    return getWriterBuffer(writer);
}
export function writePsdUint8Array(psd, options) {
    var writer = createWriter();
    writePsdInternal(writer, psd, options);
    return getWriterBufferNoCopy(writer);
}
export function writePsdBuffer(psd, options) {
    if (typeof Buffer === 'undefined') {
        throw new Error('Buffer not supported on this platform');
    }
    return Buffer.from(writePsdUint8Array(psd, options));
}
export function getLayerOrMaskContentBoundingBox(layer) {
    return boundingBoxScanner.scanLayerTransparency(layer);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBYSxRQUFRLElBQUksZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM1SCxPQUFPLEVBQWEsT0FBTyxJQUFJLGVBQWUsRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDbEYsY0FBYyxPQUFPLENBQUM7QUFDdEIsY0FBYyxPQUFPLENBQUM7QUFDdEIsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzdDLGNBQWMsT0FBTyxDQUFDO0FBQ3RCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDMUMsT0FBTyxFQUFDLGVBQWUsRUFBZSxNQUFNLHNCQUFzQixDQUFDO0FBU25FLE1BQU0sQ0FBQyxJQUFNLGlCQUFpQixHQUFHLGFBQWEsQ0FBQztBQUMvQyxNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDO0FBRXhELE1BQU0sVUFBVSxPQUFPLENBQUMsTUFBZ0MsRUFBRSxPQUFxQjtJQUM5RSxJQUFNLE1BQU0sR0FBRyxRQUFRLElBQUksTUFBTSxDQUFDLENBQUM7UUFDbEMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNuRSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEIsT0FBTyxlQUFlLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEdBQVEsRUFBRSxPQUFzQjtJQUN4RCxJQUFNLE1BQU0sR0FBRyxZQUFZLEVBQUUsQ0FBQztJQUM5QixnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLE9BQU8sZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsR0FBUSxFQUFFLE9BQXNCO0lBQ2xFLElBQU0sTUFBTSxHQUFHLFlBQVksRUFBRSxDQUFDO0lBQzlCLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdkMsT0FBTyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxHQUFRLEVBQUUsT0FBc0I7SUFDOUQsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUU7UUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO0tBQ3pEO0lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFFRCxNQUFNLFVBQVUsZ0NBQWdDLENBQUMsS0FBNEI7SUFDNUUsT0FBTyxrQkFBa0IsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4RCxDQUFDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtMYXllciwgTGF5ZXJNYXNrRGF0YSwgUHNkLCBSZWFkT3B0aW9ucywgV3JpdGVPcHRpb25zfSBmcm9tICcuL3BzZCc7XHJcbmltcG9ydCB7IFBzZFdyaXRlciwgd3JpdGVQc2QgYXMgd3JpdGVQc2RJbnRlcm5hbCwgZ2V0V3JpdGVyQnVmZmVyLCBjcmVhdGVXcml0ZXIsIGdldFdyaXRlckJ1ZmZlck5vQ29weSB9IGZyb20gJy4vcHNkV3JpdGVyJztcclxuaW1wb3J0IHsgUHNkUmVhZGVyLCByZWFkUHNkIGFzIHJlYWRQc2RJbnRlcm5hbCwgY3JlYXRlUmVhZGVyIH0gZnJvbSAnLi9wc2RSZWFkZXInO1xyXG5leHBvcnQgKiBmcm9tICcuL2Ficic7XHJcbmV4cG9ydCAqIGZyb20gJy4vY3NoJztcclxuZXhwb3J0IHsgaW5pdGlhbGl6ZUNhbnZhcyB9IGZyb20gJy4vaGVscGVycyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vcHNkJztcclxuaW1wb3J0IHsgZnJvbUJ5dGVBcnJheSB9IGZyb20gJ2Jhc2U2NC1qcyc7XHJcbmltcG9ydCB7Qm91bmRpbmdCb3hTY2FuLCBJQm91bmRpbmdCb3h9IGZyb20gJy4vQm91bmRpbmdCb3hTY2FubmVyJztcclxuZXhwb3J0IHsgUHNkUmVhZGVyLCBQc2RXcml0ZXIgfTtcclxuXHJcbmludGVyZmFjZSBCdWZmZXJMaWtlIHtcclxuXHRidWZmZXI6IEFycmF5QnVmZmVyO1xyXG5cdGJ5dGVPZmZzZXQ6IG51bWJlcjtcclxuXHRieXRlTGVuZ3RoOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBieXRlQXJyYXlUb0Jhc2U2NCA9IGZyb21CeXRlQXJyYXk7XHJcbmV4cG9ydCBjb25zdCBib3VuZGluZ0JveFNjYW5uZXIgPSBuZXcgQm91bmRpbmdCb3hTY2FuKCk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVhZFBzZChidWZmZXI6IEFycmF5QnVmZmVyIHwgQnVmZmVyTGlrZSwgb3B0aW9ucz86IFJlYWRPcHRpb25zKTogUHNkIHtcclxuXHRjb25zdCByZWFkZXIgPSAnYnVmZmVyJyBpbiBidWZmZXIgP1xyXG5cdFx0Y3JlYXRlUmVhZGVyKGJ1ZmZlci5idWZmZXIsIGJ1ZmZlci5ieXRlT2Zmc2V0LCBidWZmZXIuYnl0ZUxlbmd0aCkgOlxyXG5cdFx0Y3JlYXRlUmVhZGVyKGJ1ZmZlcik7XHJcblx0cmV0dXJuIHJlYWRQc2RJbnRlcm5hbChyZWFkZXIsIG9wdGlvbnMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVQc2QocHNkOiBQc2QsIG9wdGlvbnM/OiBXcml0ZU9wdGlvbnMpOiBBcnJheUJ1ZmZlciB7XHJcblx0Y29uc3Qgd3JpdGVyID0gY3JlYXRlV3JpdGVyKCk7XHJcblx0d3JpdGVQc2RJbnRlcm5hbCh3cml0ZXIsIHBzZCwgb3B0aW9ucyk7XHJcblx0cmV0dXJuIGdldFdyaXRlckJ1ZmZlcih3cml0ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVQc2RVaW50OEFycmF5KHBzZDogUHNkLCBvcHRpb25zPzogV3JpdGVPcHRpb25zKTogVWludDhBcnJheSB7XHJcblx0Y29uc3Qgd3JpdGVyID0gY3JlYXRlV3JpdGVyKCk7XHJcblx0d3JpdGVQc2RJbnRlcm5hbCh3cml0ZXIsIHBzZCwgb3B0aW9ucyk7XHJcblx0cmV0dXJuIGdldFdyaXRlckJ1ZmZlck5vQ29weSh3cml0ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVQc2RCdWZmZXIocHNkOiBQc2QsIG9wdGlvbnM/OiBXcml0ZU9wdGlvbnMpOiBCdWZmZXIge1xyXG5cdGlmICh0eXBlb2YgQnVmZmVyID09PSAndW5kZWZpbmVkJykge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdCdWZmZXIgbm90IHN1cHBvcnRlZCBvbiB0aGlzIHBsYXRmb3JtJyk7XHJcblx0fVxyXG5cdHJldHVybiBCdWZmZXIuZnJvbSh3cml0ZVBzZFVpbnQ4QXJyYXkocHNkLCBvcHRpb25zKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRMYXllck9yTWFza0NvbnRlbnRCb3VuZGluZ0JveChsYXllcjogTGF5ZXIgfCBMYXllck1hc2tEYXRhKTogSUJvdW5kaW5nQm94IHwgdW5kZWZpbmVkIHtcclxuXHRyZXR1cm4gYm91bmRpbmdCb3hTY2FubmVyLnNjYW5MYXllclRyYW5zcGFyZW5jeShsYXllcik7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiJGOlxccHJvamVjdHNcXGFnLXBzZFxcc3JjIn0=
