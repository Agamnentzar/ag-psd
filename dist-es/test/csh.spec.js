import { expect } from 'chai';
import * as fs from 'fs';
import * as path from 'path';
import { readCsh } from '../csh';
import { drawBezierPaths } from './utils';
var testFilesPath = path.join(__dirname, '..', '..', 'test');
var readFilesPath = path.join(testFilesPath, 'csh-read');
var resultsFilesPath = path.join(__dirname, '..', '..', 'results');
describe('CSH', function () {
    fs.readdirSync(readFilesPath).forEach(function (f) {
        it("reads CSH file (".concat(f, ")"), function () {
            var basePath = path.join(readFilesPath, f);
            var baseResults = path.join(resultsFilesPath, 'csh', f);
            var fileName = path.join(basePath, 'src.csh');
            var csh = readCsh(fs.readFileSync(fileName));
            fs.mkdirSync(baseResults, { recursive: true });
            for (var _i = 0, _a = csh.shapes; _i < _a.length; _i++) {
                var shape = _a[_i];
                drawBezierPaths(shape.paths, shape.width, shape.height, path.join(baseResults, "shape-".concat(shape.name, ".png")));
            }
            fs.writeFileSync(path.join(baseResults, "data.json"), JSON.stringify(csh, null, 2));
            // console.log(require('util').inspect(csh, false, 99, true));
            var expected = JSON.parse(fs.readFileSync(path.join(basePath, 'data.json'), 'utf8'));
            expect(csh).eql(expected, f);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvY3NoLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM5QixPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUN6QixPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFMUMsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMvRCxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMzRCxJQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFFckUsUUFBUSxDQUFDLEtBQUssRUFBRTtJQUNmLEVBQUUsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztRQUN0QyxFQUFFLENBQUMsMEJBQW1CLENBQUMsTUFBRyxFQUFFO1lBQzNCLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzdDLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzFELElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ2hELElBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFFL0MsRUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUUvQyxLQUFvQixVQUFVLEVBQVYsS0FBQSxHQUFHLENBQUMsTUFBTSxFQUFWLGNBQVUsRUFBVixJQUFVLEVBQUU7Z0JBQTNCLElBQU0sS0FBSyxTQUFBO2dCQUNmLGVBQWUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxnQkFBUyxLQUFLLENBQUMsSUFBSSxTQUFNLENBQUMsQ0FBQyxDQUFDO2FBQzNHO1lBRUQsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVwRiw4REFBOEQ7WUFFOUQsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFFdkYsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvY3NoLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleHBlY3QgfSBmcm9tICdjaGFpJztcclxuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xyXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgeyByZWFkQ3NoIH0gZnJvbSAnLi4vY3NoJztcclxuaW1wb3J0IHsgZHJhd0JlemllclBhdGhzIH0gZnJvbSAnLi91dGlscyc7XHJcblxyXG5jb25zdCB0ZXN0RmlsZXNQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJ3Rlc3QnKTtcclxuY29uc3QgcmVhZEZpbGVzUGF0aCA9IHBhdGguam9pbih0ZXN0RmlsZXNQYXRoLCAnY3NoLXJlYWQnKTtcclxuY29uc3QgcmVzdWx0c0ZpbGVzUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLicsICcuLicsICdyZXN1bHRzJyk7XHJcblxyXG5kZXNjcmliZSgnQ1NIJywgKCkgPT4ge1xyXG5cdGZzLnJlYWRkaXJTeW5jKHJlYWRGaWxlc1BhdGgpLmZvckVhY2goZiA9PiB7XHJcblx0XHRpdChgcmVhZHMgQ1NIIGZpbGUgKCR7Zn0pYCwgKCkgPT4ge1xyXG5cdFx0XHRjb25zdCBiYXNlUGF0aCA9IHBhdGguam9pbihyZWFkRmlsZXNQYXRoLCBmKTtcclxuXHRcdFx0Y29uc3QgYmFzZVJlc3VsdHMgPSBwYXRoLmpvaW4ocmVzdWx0c0ZpbGVzUGF0aCwgJ2NzaCcsIGYpO1xyXG5cdFx0XHRjb25zdCBmaWxlTmFtZSA9IHBhdGguam9pbihiYXNlUGF0aCwgJ3NyYy5jc2gnKTtcclxuXHRcdFx0Y29uc3QgY3NoID0gcmVhZENzaChmcy5yZWFkRmlsZVN5bmMoZmlsZU5hbWUpKTtcclxuXHJcblx0XHRcdGZzLm1rZGlyU3luYyhiYXNlUmVzdWx0cywgeyByZWN1cnNpdmU6IHRydWUgfSk7XHJcblxyXG5cdFx0XHRmb3IgKGNvbnN0IHNoYXBlIG9mIGNzaC5zaGFwZXMpIHtcclxuXHRcdFx0XHRkcmF3QmV6aWVyUGF0aHMoc2hhcGUucGF0aHMsIHNoYXBlLndpZHRoLCBzaGFwZS5oZWlnaHQsIHBhdGguam9pbihiYXNlUmVzdWx0cywgYHNoYXBlLSR7c2hhcGUubmFtZX0ucG5nYCkpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihiYXNlUmVzdWx0cywgYGRhdGEuanNvbmApLCBKU09OLnN0cmluZ2lmeShjc2gsIG51bGwsIDIpKTtcclxuXHJcblx0XHRcdC8vIGNvbnNvbGUubG9nKHJlcXVpcmUoJ3V0aWwnKS5pbnNwZWN0KGNzaCwgZmFsc2UsIDk5LCB0cnVlKSk7XHJcblxyXG5cdFx0XHRjb25zdCBleHBlY3RlZCA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihiYXNlUGF0aCwgJ2RhdGEuanNvbicpLCAndXRmOCcpKTtcclxuXHJcblx0XHRcdGV4cGVjdChjc2gpLmVxbChleHBlY3RlZCwgZik7XHJcblx0XHR9KTtcclxuXHR9KTtcclxufSk7XHJcbiJdLCJzb3VyY2VSb290IjoiRjpcXHByb2plY3RzXFxhZy1wc2RcXHNyYyJ9
