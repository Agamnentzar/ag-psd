import { expect } from 'chai';
import * as fs from 'fs';
import * as path from 'path';
import { readCsh } from '../csh';
import { drawBezierPaths } from './utils';
var testFilesPath = path.join(__dirname, '..', '..', 'test');
var readFilesPath = path.join(testFilesPath, 'csh-read');
var resultsFilesPath = path.join(__dirname, '..', '..', 'results');
describe('CSH', function () {
    fs.readdirSync(readFilesPath).forEach(function (f) {
        it("reads CSH file (" + f + ")", function () {
            var basePath = path.join(readFilesPath, f);
            var baseResults = path.join(resultsFilesPath, 'csh', f);
            var fileName = path.join(basePath, 'src.csh');
            var csh = readCsh(fs.readFileSync(fileName));
            fs.mkdirSync(baseResults, { recursive: true });
            for (var _i = 0, _a = csh.shapes; _i < _a.length; _i++) {
                var shape = _a[_i];
                drawBezierPaths(shape.paths, shape.width, shape.height, path.join(baseResults, "shape-" + shape.name + ".png"));
            }
            fs.writeFileSync(path.join(baseResults, "data.json"), JSON.stringify(csh, null, 2));
            // console.log(require('util').inspect(csh, false, 99, true));
            var expected = JSON.parse(fs.readFileSync(path.join(basePath, 'data.json'), 'utf8'));
            expect(csh).eql(expected, f);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvY3NoLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM5QixPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUN6QixPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFMUMsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMvRCxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMzRCxJQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFFckUsUUFBUSxDQUFDLEtBQUssRUFBRTtJQUNmLEVBQUUsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztRQUN0QyxFQUFFLENBQUMscUJBQW1CLENBQUMsTUFBRyxFQUFFO1lBQzNCLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzdDLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzFELElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ2hELElBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFFL0MsRUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUUvQyxLQUFvQixVQUFVLEVBQVYsS0FBQSxHQUFHLENBQUMsTUFBTSxFQUFWLGNBQVUsRUFBVixJQUFVLEVBQUU7Z0JBQTNCLElBQU0sS0FBSyxTQUFBO2dCQUNmLGVBQWUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxXQUFTLEtBQUssQ0FBQyxJQUFJLFNBQU0sQ0FBQyxDQUFDLENBQUM7YUFDM0c7WUFFRCxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXBGLDhEQUE4RDtZQUU5RCxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUV2RixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9jc2guc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4cGVjdCB9IGZyb20gJ2NoYWknO1xyXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XHJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XHJcbmltcG9ydCB7IHJlYWRDc2ggfSBmcm9tICcuLi9jc2gnO1xyXG5pbXBvcnQgeyBkcmF3QmV6aWVyUGF0aHMgfSBmcm9tICcuL3V0aWxzJztcclxuXHJcbmNvbnN0IHRlc3RGaWxlc1BhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAndGVzdCcpO1xyXG5jb25zdCByZWFkRmlsZXNQYXRoID0gcGF0aC5qb2luKHRlc3RGaWxlc1BhdGgsICdjc2gtcmVhZCcpO1xyXG5jb25zdCByZXN1bHRzRmlsZXNQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJ3Jlc3VsdHMnKTtcclxuXHJcbmRlc2NyaWJlKCdDU0gnLCAoKSA9PiB7XHJcblx0ZnMucmVhZGRpclN5bmMocmVhZEZpbGVzUGF0aCkuZm9yRWFjaChmID0+IHtcclxuXHRcdGl0KGByZWFkcyBDU0ggZmlsZSAoJHtmfSlgLCAoKSA9PiB7XHJcblx0XHRcdGNvbnN0IGJhc2VQYXRoID0gcGF0aC5qb2luKHJlYWRGaWxlc1BhdGgsIGYpO1xyXG5cdFx0XHRjb25zdCBiYXNlUmVzdWx0cyA9IHBhdGguam9pbihyZXN1bHRzRmlsZXNQYXRoLCAnY3NoJywgZik7XHJcblx0XHRcdGNvbnN0IGZpbGVOYW1lID0gcGF0aC5qb2luKGJhc2VQYXRoLCAnc3JjLmNzaCcpO1xyXG5cdFx0XHRjb25zdCBjc2ggPSByZWFkQ3NoKGZzLnJlYWRGaWxlU3luYyhmaWxlTmFtZSkpO1xyXG5cclxuXHRcdFx0ZnMubWtkaXJTeW5jKGJhc2VSZXN1bHRzLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcclxuXHJcblx0XHRcdGZvciAoY29uc3Qgc2hhcGUgb2YgY3NoLnNoYXBlcykge1xyXG5cdFx0XHRcdGRyYXdCZXppZXJQYXRocyhzaGFwZS5wYXRocywgc2hhcGUud2lkdGgsIHNoYXBlLmhlaWdodCwgcGF0aC5qb2luKGJhc2VSZXN1bHRzLCBgc2hhcGUtJHtzaGFwZS5uYW1lfS5wbmdgKSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKGJhc2VSZXN1bHRzLCBgZGF0YS5qc29uYCksIEpTT04uc3RyaW5naWZ5KGNzaCwgbnVsbCwgMikpO1xyXG5cclxuXHRcdFx0Ly8gY29uc29sZS5sb2cocmVxdWlyZSgndXRpbCcpLmluc3BlY3QoY3NoLCBmYWxzZSwgOTksIHRydWUpKTtcclxuXHJcblx0XHRcdGNvbnN0IGV4cGVjdGVkID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKGJhc2VQYXRoLCAnZGF0YS5qc29uJyksICd1dGY4JykpO1xyXG5cclxuXHRcdFx0ZXhwZWN0KGNzaCkuZXFsKGV4cGVjdGVkLCBmKTtcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG59KTtcclxuIl0sInNvdXJjZVJvb3QiOiJGOlxccHJvamVjdHNcXGFnLXBzZFxcc3JjIn0=
