/// <reference types="mocha" />
/// <reference path="../../typings/chai.d.ts" />
/// <reference path="../../typings/canvas.d.ts" />
require('source-map-support').install();
import * as fs from 'fs';
import * as path from 'path';
import { createCanvas, Image } from 'canvas';
import '../initializeCanvas';
import { readPsd, createReader } from '../psdReader';
import { setLogErrors } from '../descriptor';
export { createCanvas };
setLogErrors(true);
var resultsPath = path.join(__dirname, '..', '..', 'results');
export function toArrayBuffer(buffer) {
    var ab = new ArrayBuffer(buffer.length);
    var view = new Uint8Array(ab);
    for (var i = 0; i < buffer.length; ++i) {
        view[i] = buffer[i];
    }
    return ab;
}
export function repeat(times) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    if (!values.length) {
        throw new Error('missing values');
    }
    var array = [];
    for (var i = 0; i < times; i++) {
        array.push.apply(array, values);
    }
    return array;
}
export function range(start, length) {
    var array = [];
    for (var i = 0; i < length; i++) {
        array.push(start + i);
    }
    return array;
}
export function importPSD(dirName) {
    var dataPath = path.join(dirName, 'data.json');
    if (!fs.existsSync(dataPath))
        return undefined;
    return JSON.parse(fs.readFileSync(dataPath, 'utf8'));
}
export function loadImagesFromDirectory(dirName) {
    var images = {};
    fs.readdirSync(dirName)
        .filter(function (f) { return /\.png$/.test(f); })
        .forEach(function (f) { return images[f] = loadCanvasFromFile(path.join(dirName, f)); });
    return images;
}
export function createReaderFromBuffer(buffer) {
    return createReader(buffer.buffer, buffer.byteOffset, buffer.byteLength);
}
export function readPsdFromFile(fileName, options) {
    var buffer = fs.readFileSync(fileName);
    var reader = createReaderFromBuffer(buffer);
    return readPsd(reader, options);
}
export function extractPSD(filePath, psd) {
    var basePath = path.join(resultsPath, filePath);
    if (!fs.existsSync(basePath))
        fs.mkdirSync(basePath);
    if (psd.canvas) {
        fs.writeFileSync(path.join(basePath, 'canvas.png'), psd.canvas.toBuffer());
        psd.canvas = undefined;
    }
    psd.children.forEach(function (l, i) {
        if (l.canvas) {
            fs.writeFileSync(path.join(basePath, "layer-".concat(i, ".png")), l.canvas.toBuffer());
            l.canvas = undefined;
        }
    });
    fs.writeFileSync(path.join(basePath, 'data.json'), JSON.stringify(psd, null, 2));
}
export function saveCanvas(fileName, canvas) {
    if (canvas) {
        fs.writeFileSync(fileName, canvas.toBuffer());
    }
}
export function loadCanvasFromFile(filePath) {
    var img = new Image();
    img.src = fs.readFileSync(filePath);
    var canvas = createCanvas(img.width, img.height);
    canvas.getContext('2d').drawImage(img, 0, 0);
    return canvas;
}
export function compareTwoFiles(expectedPath, actual, name) {
    var expectedBuffer = fs.readFileSync(expectedPath);
    var expected = new Uint8Array(expectedBuffer.buffer, expectedBuffer.byteOffset, expectedBuffer.byteLength);
    if (expected.byteLength !== actual.byteLength) {
        throw new Error("File size is different than expected (".concat(name, ")"));
    }
    for (var i = 0; i < expected.byteLength; i++) {
        if (expected[i] !== actual[i]) {
            throw new Error("Actual file different than expected at index ".concat(i, ": actual ").concat(actual[i], ", expected ").concat(expected[i]));
        }
    }
}
export function compareCanvases(expected, actual, name) {
    var saveFailure = function () {
        var failuresDir = path.join(resultsPath, 'failures');
        if (!fs.existsSync(failuresDir)) {
            fs.mkdirSync(failuresDir);
        }
        fs.writeFileSync(path.join(failuresDir, "".concat(name.replace(/[\\/]/, '-'))), actual.toBuffer());
    };
    if (expected === actual)
        return;
    if (!expected)
        throw new Error("Expected canvas is null (".concat(name, ")"));
    if (!actual)
        throw new Error("Actual canvas is null (".concat(name, ")"));
    if (expected.width !== actual.width || expected.height !== actual.height) {
        saveFailure();
        throw new Error("Canvas size is different than expected (".concat(name, ")"));
    }
    var expectedData = expected.getContext('2d').getImageData(0, 0, expected.width, expected.height);
    var actualData = actual.getContext('2d').getImageData(0, 0, actual.width, actual.height);
    var length = expectedData.width * expectedData.height * 4;
    for (var i = 0; i < length; i++) {
        if (expectedData.data[i] !== actualData.data[i]) {
            saveFailure();
            var expectedNumBytes = expectedData.data.length;
            var actualNumBytes = actualData.data.length;
            throw new Error("Actual canvas (".concat(actualNumBytes, " bytes) different ") +
                "than expected (".concat(name, ": ").concat(expectedNumBytes, " bytes) ") +
                "at index ".concat(i, ": actual ").concat(actualData.data[i], " vs. expected ").concat(expectedData.data[i]));
        }
    }
}
export function compareBuffers(actual, expected, test, start, offset) {
    if (start === void 0) { start = 0; }
    if (offset === void 0) { offset = 0; }
    if (!actual)
        throw new Error("Actual buffer is null or undefined (".concat(test, ")"));
    if (!expected)
        throw new Error("Expected buffer is null or undefined (".concat(test, ")"));
    for (var i = start; i < expected.length; i++) {
        if (expected[i] !== actual[i + offset]) {
            throw new Error("Buffers differ " +
                "expected: 0x".concat(expected[i].toString(16), " at [0x").concat(i.toString(16), "] ") +
                "actual: 0x".concat(actual[i + offset].toString(16), " at [0x").concat((i + offset).toString(16), "] (").concat(test, ")"));
        }
    }
    if (actual.length !== expected.length)
        throw new Error("Buffers differ in size actual: ".concat(actual.length, " expected: ").concat(expected.length, " (").concat(test, ")"));
}
export function expectBuffersEqual(actual, expected, name) {
    var length = Math.max(actual.length, expected.length);
    for (var i = 0; i < length; i++) {
        if (actual[i] !== expected[i]) {
            fs.writeFileSync(path.join(__dirname, '..', '..', 'results', name), Buffer.from(actual));
            throw new Error("Different byte at 0x".concat(i.toString(16), " in (").concat(name, ")"));
        }
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
